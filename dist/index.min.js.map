{"version":3,"sources":["index.js"],"names":["express","require","path","sharp","app","PORT","set","join","__dirname","log","process","cwd","console","__filename","obGlobal","obErori","vectorFoldere","_i","_vectorFoldere","length","folder","fs","existsSync","folderCaleAbsoluta","mkdirSync","initErori","continut","readFileSync","eroare_default","imagine","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","info_erori","Symbol","iterator","next","done","eroare","value","err","error","afisareEroare","res","identificator","titlu","text","find","e","imaginePath","split","pop","status","render","get","_req","use","sendFile","req","ip","pagina","url","filePath","rezRandare","send","listen","concat"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,KAAOD,QAAQ,QADfD,GAAOC,QAAGA,MAGVE,MAAQF,QAAQ,SADdG,IAAGH,UAKLI,KAAO,KAEbD,IAAIE,IAAI,cAAe,OAHvBF,IAAMA,IAAG,QAAUF,KAAnBK,KAAAC,UAAA,UAGAJ,QAAQK,IAAA,mBAARD,WACAJ,QAAQK,IAAA,4BAA8BC,QAAtCC,OAEAC,QAAQH,IAAI,eAAAI,YASZ,IAJA,IAAIC,SAAW,CAAEC,QAAS,MAE1BC,cAAA,CAAA,OAAA,iBAAA,SAAA,SAEAC,GAAA,EAAAC,eAAqBF,cAArBC,GAAAC,eAAAC,OAAAF,KAAoC,CAA/B,IAAMG,OAAMF,eAAAD,IADXD,mBAAyBd,KAAAK,KAAAC,UAAkBY,QAGxCC,GAAGC,WAAWC,qBAFvBF,GAAAG,UAAAD,oBAmDA,SAASE,YAAT,IACQ,IAAAC,EAAAL,GAAAM,aAAAzB,KAAAK,KAAAC,UAAA,2BAAA,SACMkB,SAAQX,QAAMY,KAAAA,MAAazB,GAGjCY,SAASC,QAAQa,eAAeC,QAAU,0BAA4Bf,SAASC,QAAQa,eAAeC,QAL9G,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACQ,IAAA,IAAAC,EAAAC,EAAArB,SAAAC,QAAAqB,WAAAC,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAAA,CAAA,IAAAW,EAAAP,EAAAQ,MAAAD,EAAAZ,QAAA,0BAAAY,EAAAZ,SADR,MAAAc,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,QAAA,IAAAb,GAAA,MAAAK,EAAA,QAAAA,EAAA,SAAA,QAAA,GAAAJ,EAAA,MAAAC,IACQ,MAAAW,GAMA/B,QAAAgC,MAAA,2CAAAD,IANA,SAAAE,cAAAC,EAAAC,EAAAC,EAAAC,EAAApB,GAAA,IAAAY,EAAA3B,SAAAC,QAAAqB,WAAAc,KAAA,SAAAC,GAAA,OAAAA,EAAAJ,gBAAAA,KAAAjC,SAAAC,QAAAa,eAAAwB,EAAAlD,KAAAK,KAAAC,UAAA,wBAAAiC,EAAAZ,QAAAwB,MAAA,KAAAC,OAAAjC,GAAAC,WAAA8B,KAAAX,EAAAZ,QAAA,uCAAAiB,EAAAS,OAAAd,EAAAc,OAAAR,EAAA,KAAAS,OAAA,gBAAA,CAAAR,MAAAA,GAAAP,EAAAO,MAAAC,KAAAA,GAAAR,EAAAQ,KAAApB,QAAAY,EAAAZ,UAjDAR,IAAAA,IAAGG,WAAUD,QAAAA,OAAbrB,KAAAK,KAAAC,UAAA,aASRJ,IAAIqD,IAAI,eAAgB,SAACC,EAAMZ,GAJ3Ba,EAAIC,SAAA1D,KAAYF,KAAOQ,UAAQN,sCAMlCE,IAEDqD,IAAA,CAAA,IAAA,SAAA,SAAA,SAAAI,EAAAf,GAEIA,EAAIU,OAAO,eAAgB,CAAEM,GAAID,EAAIC,OAAV1D,IAA3BqD,IAAA,gCAAA,SAAAC,EAAAZ,GAGJD,cAAAC,EAAA,OAGC1C,IAEDqD,IAAA,SAAA,SAAAC,EAAAZ,GAEID,cAAcC,EAAK,OAIvB1C,IAAIqD,IAAI,KAAM,SAACI,EAAKf,GAAhBW,IAAIM,EAAMF,EAAAG,IACJD,EAAaC,KAAnBzD,KAAAC,UAAA,QAAA,SAAAuD,EAAA,QAGA,IAAK1C,GAAGC,WAAW2C,GAAd5C,OAAGC,cAAHwB,EAAyB,IAAA,kBAAA,6BAI9BA,EAAIU,OAAO,SAAWO,EAAQ,SAACpB,EAAKuB,GAAhCV,GAAJb,EACI,OAASE,cAAAC,EAAA,IAAA,kBAAA,6BAERA,EAAAqB,KAAAD,OAMTzC,YAmCArB,IAAIgE,OAAO/D,KAAM,WACbO,QAAQH,IAAR,wCAAA4D,OAAoDhE","file":"index.min.js","sourcesContent":["const express = require(\"express\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst sharp = require(\"sharp\");\r\n\r\n\r\nconst app = express();\r\nconst PORT = 8080;\r\n\r\napp.set(\"view engine\", \"ejs\");\r\napp.set(\"views\", path.join(__dirname, \"views\"));\r\n\r\nconsole.log(\"Folder index.js:\", __dirname);\r\nconsole.log(\"Folder curent (de lucru):\", process.cwd());\r\nconsole.log(\"Cale fișier:\", __filename);\r\n\r\n// Obiect global pentru gestionarea erorilor\r\nlet obGlobal = { obErori: null };\r\n\r\n// Crearea folderelor necesare\r\nconst vectorFoldere = [\"temp\", \"poze_uploadate\", \"backup\", \"temp1\"];\r\nfor (const folder of vectorFoldere) {\r\n    const folderCaleAbsoluta = path.join(__dirname, folder);\r\n    if (!fs.existsSync(folderCaleAbsoluta)) {\r\n        fs.mkdirSync(folderCaleAbsoluta);\r\n    }\r\n}\r\n\r\n// Servirea fișierelor statice\r\napp.use(\"/resurse\", express.static(path.join(__dirname, \"resurse\")));\r\n\r\n\r\n// Ruta corectă pentru favicon.ico\r\napp.get(\"/favicon.ico\", (_req, res) => {\r\n    res.sendFile(path.join(__dirname, \"resurse/imagini/ico/favicon.ico\"));\r\n});\r\n\r\n// Permite accesul la pagina principală de pe mai multe rute\r\napp.get([\"/\", \"/index\", \"/home\"], (req, res) => {\r\n    res.render(\"pagini/index\", { ip: req.ip });\r\n});\r\n\r\n// Blocare acces direct la resurse fără fișier specificat\r\napp.get(/^\\/resurse\\/[a-z0-9A-Z/_-]+$/i, (_req, res) => {\r\n    afisareEroare(res, 403);\r\n});\r\n\r\n// Interzicere acces fișiere `.ejs`\r\napp.get(\"/*.ejs\", (_req, res) => {\r\n    afisareEroare(res, 400);\r\n});\r\n\r\n// Rută pentru orice altceva (pagini dinamice)\r\napp.get(\"/*\", (req, res) => {\r\n    const pagina = req.url;\r\n    const filePath = path.join(__dirname, \"views\", \"pagini\", pagina + \".ejs\");\r\n\r\n    if (!fs.existsSync(filePath)) {\r\n        return afisareEroare(res, 404, \"Pagina negăsită\", \"Verificați calea URL-ului\");\r\n    }\r\n\r\n    res.render(\"pagini\" + pagina, (err, rezRandare) => {\r\n        if (err) {\r\n            return afisareEroare(res, 404, \"Pagina negăsită\", \"Verificați calea URL-ului\");\r\n        }\r\n        res.send(rezRandare);\r\n    });\r\n});\r\n\r\n// Inițializare erori\r\ninitErori()\r\n\r\nfunction initErori() {\r\n    try {\r\n        const continut = fs.readFileSync(path.join(__dirname, \"resurse/json/erori.json\"), \"utf-8\");\r\n        obGlobal.obErori = JSON.parse(continut);\r\n\r\n        obGlobal.obErori.eroare_default.imagine = \"/resurse/imagini/erori/\" + obGlobal.obErori.eroare_default.imagine;\r\n\r\n        for (let eroare of obGlobal.obErori.info_erori) {\r\n            eroare.imagine = \"/resurse/imagini/erori/\" + eroare.imagine;\r\n        }\r\n    } catch (err) {\r\n        console.error(\"Eroare la citirea fișierului erori.json:\", err);\r\n    }\r\n}\r\n\r\n// Funcție pentru afișarea erorilor\r\nfunction afisareEroare(res, identificator, titlu, text, imagine) {\r\n    let eroare = obGlobal.obErori.info_erori.find(e => e.identificator === identificator) || obGlobal.obErori.eroare_default;\r\n\r\n    // Verifică dacă imaginea există, altfel folosește una default\r\n    const imaginePath = path.join(__dirname, \"resurse/imagini/erori\", eroare.imagine.split(\"/\").pop());\r\n    if (!fs.existsSync(imaginePath)) {\r\n        eroare.imagine = \"/resurse/imagini/erori/interzis.png\"; // Imagine default\r\n    }\r\n\r\n    res.status(eroare.status ? identificator : 400).render(\"pagini/eroare\", {\r\n        titlu: titlu || eroare.titlu,\r\n        text: text || eroare.text,\r\n        imagine: eroare.imagine\r\n    });\r\n}\r\n\r\n// Pornire server\r\napp.listen(PORT, () => {\r\n    console.log(`Serverul rulează la http://localhost:${PORT}`);\r\n});\r\n"]}